{
	"info": {
		"_postman_id": "tech-challenge-api-collection",
		"name": "Tech Challenge API",
		"description": "Complete API collection for the Tech Challenge FastAPI application with JWT Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "Health",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health",
								""
							]
						},
						"description": "Check API and database health status (PUBLIC - No auth required)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
									"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úÖ Tokens saved to collection variables\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"AdminPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register a new user. First user becomes admin automatically.\n\nPassword requirements:\n- Minimum 8 characters\n- At least 1 uppercase letter\n- At least 1 lowercase letter\n- At least 1 digit\n\nReturns access_token and refresh_token which are automatically saved to collection variables."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
									"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úÖ Tokens saved to collection variables\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin@example.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "AdminPass123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials (OAuth2 password flow).\n\nReturns access_token and refresh_token which are automatically saved to collection variables."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
									"    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
									"    console.log(\"‚úÖ New tokens saved to collection variables\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh access token using refresh token.\n\nReturns new access_token and refresh_token which are automatically saved to collection variables."
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						},
						"description": "Get current authenticated user information.\n\nRequires: Valid access token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Management",
			"item": [
				{
					"name": "List All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"users"
							]
						},
						"description": "List all registered users in the system.\n\n‚ö†Ô∏è Requires: Admin privileges\n\nReturns array of user objects with:\n- id\n- email\n- is_active\n- is_admin\n- created_at"
					},
					"response": []
				},
				{
					"name": "Promote User to Admin",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/users/2/promote",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"users",
								"2",
								"promote"
							]
						},
						"description": "Promote a regular user to admin.\n\n‚ö†Ô∏è Requires: Admin privileges\n\nPath parameter:\n- user_id: ID of the user to promote (change '2' in URL)\n\nReturns updated user object.\n\nError cases:\n- 404: User not found\n- 400: User is already admin"
					},
					"response": []
				},
				{
					"name": "Demote User from Admin",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/users/2/demote",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"users",
								"2",
								"demote"
							]
						},
						"description": "Demote an admin user to regular user.\n\n‚ö†Ô∏è Requires: Admin privileges\n\nPath parameter:\n- user_id: ID of the user to demote (change '2' in URL)\n\nReturns updated user object.\n\nError cases:\n- 404: User not found\n- 400: User is not admin\n- 400: Cannot demote yourself (prevents lockout)\n\nüîí Security: Admins cannot demote themselves to prevent system lockout."
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Get All Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/?page=1&per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "per_page",
									"value": "5",
									"description": "Items per page (default: 10)"
								}
							]
						},
						"description": "Get paginated list of all books.\n\nRequires: Authentication"
					},
					"response": []
				},
				{
					"name": "Get Book by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"1"
							]
						},
						"description": "Get a single book by its ID.\n\nRequires: Authentication"
					},
					"response": []
				},
				{
					"name": "Search Books by Title",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/search?title=python&page=1&per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"search"
							],
							"query": [
								{
									"key": "title",
									"value": "python",
									"description": "Search by book title (case-insensitive)"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "per_page",
									"value": "5",
									"description": "Items per page (default: 10)"
								}
							]
						},
						"description": "Search books by title with pagination.\n\nRequires: Authentication"
					},
					"response": []
				},
				{
					"name": "Search Books by Category",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/search?category=fiction&page=1&per_page=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"search"
							],
							"query": [
								{
									"key": "category",
									"value": "fiction",
									"description": "Search by category (case-insensitive, partial match)"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "per_page",
									"value": "5",
									"description": "Items per page (default: 10)"
								}
							]
						},
						"description": "Search books by category with pagination.\n\nRequires: Authentication"
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get All Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/categories/?page=1&per_page=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"categories",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "per_page",
									"value": "10",
									"description": "Items per page (default: 10)"
								}
							]
						},
						"description": "Get paginated list of all book categories.\n\nRequires: Authentication"
					},
					"response": []
				}
			]
		},
		{
			"name": "Scraping",
			"item": [
				{
					"name": "Trigger Scraping (Admin Only)",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/scraping/trigger",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"scraping",
								"trigger"
							]
						},
						"description": "Trigger web scraping to collect book data and populate the database and CSV file.\n\n‚ö†Ô∏è Requires: Admin privileges (first registered user or is_admin=true)\n\nThis process:\n1. Scrapes ~1000 books from books.toscrape.com\n2. Saves data to SQLite database\n3. Generates CSV file in data/books.csv\n4. Returns statistics"
					},
					"response": []
				},
				{
					"name": "Get Scraping Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/scraping/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"scraping",
								"status"
							]
						},
						"description": "Get current database statistics and scraping status.\n\nRequires: Authentication"
					},
					"response": []
				}
			]
		},
		{
			"name": "Stats",
			"item": [
				{
					"name": "Get Overview Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stats/overview",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats",
								"overview"
							]
						},
						"description": "Get general collection statistics: total books, average price, rating distribution.\n\nRequires: Authentication\n\nStatus: Endpoint prepared (returns 501 Not Implemented)"
					},
					"response": []
				},
				{
					"name": "Get Category Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stats/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats",
								"categories"
							]
						},
						"description": "Get detailed statistics by category: book count, prices per category.\n\nRequires: Authentication\n\nStatus: Endpoint prepared (returns 501 Not Implemented)"
					},
					"response": []
				}
			]
		},
		{
			"name": "ML",
			"item": [
				{
					"name": "Get ML Features",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ml/features",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ml",
								"features"
							]
						},
						"description": "Get data formatted for ML model features.\n\nRequires: Authentication\n\nStatus: Endpoint prepared (returns 501 Not Implemented)"
					},
					"response": []
				},
				{
					"name": "Get ML Training Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ml/training-data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ml",
								"training-data"
							]
						},
						"description": "Get dataset for ML model training.\n\nRequires: Authentication\n\nStatus: Endpoint prepared (returns 501 Not Implemented)"
					},
					"response": []
				},
				{
					"name": "Post ML Predictions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"features\": [1.0, 2.0, 3.0]\n}"
						},
						"url": {
							"raw": "{{base_url}}/ml/predictions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ml",
								"predictions"
							]
						},
						"description": "Endpoint to receive ML model predictions.\n\nRequires: Authentication\n\nStatus: Endpoint prepared (returns 501 Not Implemented)"
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	]
}
